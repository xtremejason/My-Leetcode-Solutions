class Solution {
private:
    struct endCompare {
        bool operator()(const int &x, const int &y) {
            return x > y;
        }
    };
public:
    int connectSticks(vector<int>& sticks) {
        int cost = 0;
        // create min heap and populate with stick lengths
        priority_queue<int, vector<int>, endCompare> minHeap;
        for(int s : sticks) minHeap.push(s);
        
        while(minHeap.size() > 1) {
            // take two sticks from heap and combine
            int stick1 = minHeap.top();
            minHeap.pop();
            int stick2 = minHeap.top();
            minHeap.pop();
            
            // add new stick to heap
            minHeap.push(stick1 + stick2);
            // update cost
            cost += stick1 + stick2;
        }
        
        return cost;
    }
};
