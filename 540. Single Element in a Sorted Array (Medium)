class Solution {
public:
    // Binary Search - recognize pattern that with all pairs, first occurence of # is in even index
    // followed by a copy in next odd index
    int singleNonDuplicate(vector<int>& nums) {
        int low = 0; int high = nums.size() - 2;
        
        while(low <= high) {
            int mid = low + (high - low) / 2;
            // we know that first half contains only pairs since its copy is in place
            if((mid % 2 == 0 && nums[mid] == nums[mid + 1]) || (mid % 2 == 1 && nums[mid] == nums[mid - 1])) low = mid + 1;
            // if copy out of place, we know that single digit is in second half
            else high = mid - 1;
        }

        return nums[low];
    }
};
