// Using Deque - Monotonic Queue
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        deque<int> deque; // store indexes
        
        for(int i = 0; i < nums.size(); i++) {
            // pop front if size greater than k
            while(!deque.empty() && i - deque.front() >= k) deque.pop_front(); 
            // pop all nodes from back that are less than nums[i]
            while(!deque.empty() && nums[deque.back()] < nums[i]) deque.pop_back();
            deque.push_back(i);
            
            if(i >= k - 1) ans.push_back(nums[deque.front()]); // add to ans
        }
        return ans;
    }
};


// // Brute Force Solution
// class Solution {
// public:
//     vector<int> maxSlidingWindow(vector<int>& nums, int k) {
//         if(nums.size() * k == 0) return vector<int>();
//         if(k > nums.size() - 1) return vector<int>();
//         vector<int> ans;
        
//         for(int i = 0; i < nums.size() - k + 1; i++) {
//             int localMax = INT_MIN;
//             for(int j = i; j < i + k; j++) {
//                 localMax = max(localMax, nums[j]);
//             }
//             ans.push_back(localMax);
//         }
//         return ans;
//     }
// };
