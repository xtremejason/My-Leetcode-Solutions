/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
private:
    int calculateCycleLength(ListNode* slow) {
        ListNode* current = slow;
        int cycleLength = 0;
        do {
            current = current->next;
            cycleLength++;
        } while(slow != current);
        
        return cycleLength;
    }
    
    ListNode* findStart(ListNode* head, const int &cycleLength) {
        ListNode* pointer1 = head, *pointer2 = head;
        // move fast pointer forward 
        for(int i = 0; i < cycleLength; i++) pointer2 = pointer2->next;
        
        // increment both pointers until they meet at start of cycle
        while(pointer1 != pointer2) {
            pointer1 = pointer1->next;
            pointer2 = pointer2->next;
        }
        return pointer1;
    }
    
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;
        int cycleLength = 0;
        
        // find cycle
        while(fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast) {
                cycleLength = calculateCycleLength(slow);
                break;
            }
        }
        return cycleLength == 0 ? nullptr : findStart(head, cycleLength);
    }
};
