class Solution {
public:
    bool checkInclusion(string pattern, string str) {
        int windowStart = 0, matched = 0;
        unordered_map<char, int> charFrequencyMap;
        for(auto c : pattern) charFrequencyMap[c]++; // initialize pattern map

        // try to match all chars from frequencyMap to window
        for(int windowEnd = 0; windowEnd < str.length(); windowEnd++) {
            char rightChar = str[windowEnd];
            // decrement frequency of right character if in pattern
            if(charFrequencyMap.count(rightChar)) {
                charFrequencyMap[rightChar]--;
                if(charFrequencyMap[rightChar] == 0) matched++;
            }

            if(matched == charFrequencyMap.size()) return true; // pattern completely matched

            // shrink window and replace character count in map 
            if(windowEnd >= pattern.length() - 1) {
                char leftChar = str[windowStart++];
                if(charFrequencyMap.count(leftChar)) { // if a pattern character
                    if(charFrequencyMap[leftChar] == 0) matched--;
                    charFrequencyMap[leftChar]++;
                }
            }
        }
        return false;
    }
};
