/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        return DFS(root, ans);
    }

    vector<int> DFS(TreeNode* root, vector<int>& ans){
        if(!root)
            return {};
        
        ans.push_back(root->val);
        
        if(root->left)
            DFS(root->left, ans);
        
        if(root->right)
            DFS(root->right, ans);
        
        return ans;
    }

};
    

//First Implementation

//     vector<int> ans;
//     vector<int> preorderTraversal(TreeNode* root) {
//         if(!root)
//             return {};
        
//         ans.push_back(root->val);
        
//         if(root->left)
//             preorderTraversal(root->left);
        
//         if(root->right)
//             preorderTraversal(root->right);
        
//         return ans;
//     }
