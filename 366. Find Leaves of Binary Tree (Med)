/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int getHeight(TreeNode* root, vector<vector<int>> &ans) {
        if(root == nullptr) return 0;
        // get height of current node
        int currentHeight = 1 + max(getHeight(root->left, ans), getHeight(root->right, ans));
        if(currentHeight > ans.size()) ans.push_back(vector<int>());
        ans[currentHeight - 1].push_back(root->val); // add current node to set of same height nodes
        return currentHeight;
    }
public:
    vector<vector<int>> findLeaves(TreeNode* root) {
        vector<vector<int>> ans;
        getHeight(root, ans);
        return ans;
    }
};
