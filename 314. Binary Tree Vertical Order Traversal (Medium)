/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void DFS(TreeNode* root, map<int, vector<pair<int,int>>> &map, int verticalValue, int rowValue) {
        if(root == nullptr) return;
        map[verticalValue].push_back(make_pair(root->val, rowValue)); // add to value to map
        
        // DFS on children
        DFS(root->left, map, verticalValue - 1, rowValue + 1);
        DFS(root->right, map, verticalValue + 1, rowValue + 1);
    }
    
public:
    vector<vector<int>> verticalOrder(TreeNode* root) {
        vector<vector<int>> ans;
        map<int, vector<pair<int,int>>> map; // store pair<value, row>
        DFS(root, map, 0, 0); // call dfs function
        
        // Map contains values mapped to their respective columns, but now need to be sorted by row #
        for(auto p : map) {
            // lambda comparator to sort by row
            sort(p.second.begin(), p.second.end(), [](const pair<int,int> &x, const pair<int,int> &y) {
                return x.second < y.second;
            });
            // add only the values to a new arr to add to answer set
            vector<int> arr;
            for(auto p2 : p.second) arr.push_back(p2.first);
            ans.push_back(arr);
        }
        return ans;
    }
};
